{"version":3,"sources":["test.es6"],"names":[],"mappings":"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","file":"test.js","sourcesContent":["'use strict';\n\n/*eslint-env node, mocha */\n\nimport lint from 'mocha-eslint';\nimport * as assert from 'assert';\nimport * as path from 'path';\nimport * as Promise from 'bluebird';\nimport * as sigv4 from '../src/index.es6';\n\nconst fs = Promise.promisifyAll(require('fs'));\n\n/**\n * Mocha ESLint\n */\n{\n\tlint(['**/*.es6']);\n}\n\n/**\n * Tests from the AWS Documentation\n */\n{\n\t/**\n\t * Implements https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n\t */\n\tdescribe('Signing AWS Requests', () => {\n\t\tlet signedHeaders = 'content-type;host;x-amz-date';\n\t\tlet requestPayload = 'Action=ListUsers&Version=2010-05-08';\n\t\tlet hashedCanonicalRequest = '3511de7e95d28ecd39e9513b642aee07e54f4941150d8df8bf94b328ef7e55e2';\n\n\t\t/**\n\t\t * Implements https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n\t\t */\n\t\tdescribe('Task 1: Create a Canonical Request', () => {\n\t\t\tit('should match the hashed payload', () => {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\tsigv4.hash(requestPayload),\n\t\t\t\t\t'b6359072c78d70ebee1e81adcbab4f01bf2c23245fa365ef83fe8f1f955085e2'\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tlet canonicalForm = 'POST\\n/\\n\\ncontent-type:application/x-www-form-urlencoded; charset=utf-8\\nhost:iam.a' +\n\t\t\t\t'mazonaws.com\\nx-amz-date:20110909T233600Z\\n\\ncontent-type;host;x-amz-date\\nb6359072c78d70ebee1e81adc' +\n\t\t\t\t'bab4f01bf2c23245fa365ef83fe8f1f955085e2';\n\n\t\t\tit('should match the sample canonical form', () => {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\tsigv4.canonicalRequest(\n\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t'/',\n\t\t\t\t\t\t'',\n\t\t\t\t\t\t'content-type:application/x-www-form-urlencoded; charset=utf-8\\nhost:iam.amazonaws.com\\nx-amz' +\n\t\t\t\t\t\t\t'-date:20110909T233600Z',\n\t\t\t\t\t\tsignedHeaders,\n\t\t\t\t\t\trequestPayload\n\t\t\t\t\t),\n\t\t\t\t\tcanonicalForm\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit('should match the sample hashed canonical request', () => {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\tsigv4.hash(canonicalForm),\n\t\t\t\t\thashedCanonicalRequest\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tlet algorithm = 'AWS4-HMAC-SHA256';\n\t\tlet credentialScope = '20110909/us-east-1/iam/aws4_request';\n\t\tlet stringToSign = 'AWS4-HMAC-SHA256\\n20110909T233600Z\\n20110909/us-east-1/iam/aws4_request\\n3511de7e95d28ecd' +\n\t\t\t'39e9513b642aee07e54f4941150d8df8bf94b328ef7e55e2';\n\n\t\t/**\n\t\t * Implements https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n\t\t */\n\t\tdescribe('Task 2: Create a String to Sign', () => {\n\t\t\tit('should match the sample string to sign', () => {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\tsigv4.stringToSign(\n\t\t\t\t\t\talgorithm,\n\t\t\t\t\t\t'20110909T233600Z',\n\t\t\t\t\t\tcredentialScope,\n\t\t\t\t\t\thashedCanonicalRequest\n\t\t\t\t\t),\n\t\t\t\t\tstringToSign\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tlet signature = 'ced6826de92d2bdeed8f846f0bf508e8559e98e4b0199114b84c54174deb456c';\n\n\t\t/**\n\t\t * Implements https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n\t\t */\n\t\tdescribe('Task 3: Calculate the Signature', () => {\n\t\t\tit('should match the hex signature', () => {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\tsigv4.sign(\n\t\t\t\t\t\t'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY',\n\t\t\t\t\t\t'20110909',\n\t\t\t\t\t\t'us-east-1',\n\t\t\t\t\t\t'iam',\n\t\t\t\t\t\tstringToSign\n\t\t\t\t\t),\n\t\t\t\t\tsignature\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * Implements https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\t\t */\n\t\tdescribe('Task 4: Add the Signing Information to the Request', () => {\n\t\t\tlet accessKeyId = 'AKIDEXAMPLE';\n\n\t\t\tit('should match the authorization', () => {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\tsigv4.authorization(\n\t\t\t\t\t\talgorithm,\n\t\t\t\t\t\taccessKeyId,\n\t\t\t\t\t\tcredentialScope,\n\t\t\t\t\t\tsignedHeaders,\n\t\t\t\t\t\tsignature\n\t\t\t\t\t),\n\t\t\t\t\t'AWS4-HMAC-SHA256 Credential=AKIDEXAMPLE/20110909/us-east-1/iam/aws4_request, SignedHeaders=conte' +\n\t\t\t\t\t\t'nt-type;host;x-amz-date, Signature=ced6826de92d2bdeed8f846f0bf508e8559e98e4b0199114b84c54174' +\n\t\t\t\t\t\t'deb456c'\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit('should match the query string', () => {\n\t\t\t\tassert.strictEqual(\n\t\t\t\t\tsigv4.querystringify(\n\t\t\t\t\t\t'Action=CreateUser&UserName=NewUser&Version=2010-05-08&',\n\t\t\t\t\t\talgorithm,\n\t\t\t\t\t\taccessKeyId,\n\t\t\t\t\t\t'20140611/us-east-1/iam/aws4_request',\n\t\t\t\t\t\t'20140611T231318Z',\n\t\t\t\t\t\t'30',\n\t\t\t\t\t\t'host',\n\t\t\t\t\t\tsignature\n\t\t\t\t\t),\n\t\t\t\t\t'Action=CreateUser&UserName=NewUser&Version=2010-05-08&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Cre' +\n\t\t\t\t\t\t'dential=AKIDEXAMPLE%2F20140611%2Fus-east-1%2Fiam%2Faws4_request&X-Amz-Date=20140611T231318Z&' +\n\t\t\t\t\t\t'X-Amz-Expires=30&X-Amz-SignedHeaders=host&X-Amz-Signature=ced6826de92d2bdeed8f846f0bf508e855' +\n\t\t\t\t\t\t'9e98e4b0199114b84c54174deb456c'\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t});\n}\n\n/**\n * AWS Signature Version 4 Test Suite\n */\n{\n\tlet algorithm = 'AWS4-HMAC-SHA256';\n\tlet accessKeyId = 'AKIDEXAMPLE';\n\tlet requestDate = sigv4.formatDateTime(new Date('Mon, 09 Sep 2011 23:36:00 GMT'));\n\tlet credentialScope = '20110909/us-east-1/host/aws4_request';\n\tlet secretAccessKey = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY';\n\tlet suiteDir = path.join(__dirname, 'fixtures/aws4_testsuite/');\n\n\t/**\n\t * Implements https://docs.aws.amazon.com/general/latest/gr/signature-v4-test-suite.html\n\t */\n\tfs.readdirAsync(suiteDir).then(files => {\n\t\tlet groups = files\n\t\t\t.filter(file => file.slice(-5) === '.sreq')\n\t\t\t.map(file => file.slice(0, -5));\n\n\t\tgroups.forEach(group => {\n\t\t\tdescribe('Test Suite: ' + group, () => {\n\t\t\t\tlet request,\n\t\t\t\t\tcanonicalRequest,\n\t\t\t\t\tstringToSign,\n\t\t\t\t\tauthorizationHeader,\n\t\t\t\t\tsignedRequest;\n\n\t\t\t\tbefore(done => {\n\t\t\t\t\tlet files = [\n\t\t\t\t\t\t'req',   // <file-name>.req—the web request to be signed.\n\t\t\t\t\t\t'creq',  // <file-name>.creq—the resulting canonical request.\n\t\t\t\t\t\t'sts',   // <file-name>.sts—the resulting string to sign.\n\t\t\t\t\t\t'authz', // <file-name>.authz—the Authorization header.\n\t\t\t\t\t\t'sreq'   // <file-name>.sreq— the signed request.\n\t\t\t\t\t].map(ext => fs.readFileAsync(path.join(suiteDir, group + '.' + ext), 'utf8'));\n\n\t\t\t\t\tPromise.settle(files).then(results => {\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\tcanonicalRequest,\n\t\t\t\t\t\t\tstringToSign,\n\t\t\t\t\t\t\tauthorizationHeader,\n\t\t\t\t\t\t\tsignedRequest\n\t\t\t\t\t\t] = results.map(r => r.value());\n\n\t\t\t\t\t\tcanonicalRequest = canonicalRequest.replace(/\\r/g, '');\n\t\t\t\t\t\tstringToSign = stringToSign.replace(/\\r/g, '');\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tdescribe('Task 1: Create a Canonical Request for Signature Version 4', () => {\n\t\t\t\t\tit('should match the canonical request', () => {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\tsigv4.requestToCanonicalRequest(request),\n\t\t\t\t\t\t\tcanonicalRequest\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tdescribe('Task 2: Create a String to Sign for Signature Version 4', () => {\n\t\t\t\t\tit('should match the string to sign', () => {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\tsigv4.stringToSign(\n\t\t\t\t\t\t\t\talgorithm,\n\t\t\t\t\t\t\t\trequestDate,\n\t\t\t\t\t\t\t\tcredentialScope,\n\t\t\t\t\t\t\t\tsigv4.hash(canonicalRequest)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tstringToSign\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tdescribe('Task 3: Calculate the AWS Signature Version 4', () => {\n\t\t\t\t\tit('should match the authorization header value', () => {\n\t\t\t\t\t\tlet signedHeaders = canonicalRequest.split('\\n').slice(-2, -1)[0];\n\t\t\t\t\t\tlet signature = sigv4.sign(\n\t\t\t\t\t\t\tsecretAccessKey,\n\t\t\t\t\t\t\trequestDate.slice(0, 8),\n\t\t\t\t\t\t\t'us-east-1',\n\t\t\t\t\t\t\t'host',\n\t\t\t\t\t\t\tstringToSign\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\tsigv4.authorization(\n\t\t\t\t\t\t\t\talgorithm,\n\t\t\t\t\t\t\t\taccessKeyId,\n\t\t\t\t\t\t\t\tcredentialScope,\n\t\t\t\t\t\t\t\tsignedHeaders,\n\t\t\t\t\t\t\t\tsignature\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tauthorizationHeader\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tdescribe('The Signed Request', () => {\n\t\t\t\t\tit('should match the signed request value', () => {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\tsigv4.addAuthorization(request, authorizationHeader),\n\t\t\t\t\t\t\tsignedRequest\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}"]}