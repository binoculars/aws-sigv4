{"version":3,"sources":["../gh-pages/src/index.es6"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport 'babel/register';\nimport * as crypto from 'crypto';\nimport * as path from 'path';\nimport * as querystring from 'querystring';\n\nconst CRLF = '\\r\\n';\n\n/**\n * Computes the HMAC\n * @param {!string} key - The key\n * @param {!string} data - The data to hash\n * @param {?string} [encoding=binary] - The encoding type (hex|binary)\n * @returns {string|buffer} - The output HMAC\n */\nfunction hmac(key, data, encoding='binary') {\n\treturn crypto\n\t\t.createHmac('sha256', key)\n\t\t.update(data)\n\t\t.digest(encoding);\n}\n\n/**\n * Computes the hash\n * @param {!string} data - The data to hash\n * @returns {string} - The hashed output\n */\nexport function hash(data) {\n\treturn crypto\n\t\t.createHash('sha256')\n\t\t.update(data)\n\t\t.digest('hex');\n}\n\n/**\n * Formats a Date object to an AWS date string\n * @param {!Date} date - The date\n * @returns {string} - The formatted date string\n */\nexport function formatDateTime(date) {\n\treturn date.toISOString().replace(/-|:|(\\.\\d+)/g, '');\n}\n\n/**\n * Creates the canonical request\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n * @param {!string} httpRequestMethod - The HTTP request method (e.g. `GET` or `POST`)\n * @param {!string} canonicalURI - The canonical URI\n * @param {!string} canonicalQueryString - The canonical query string\n * @param {!string} canonicalHeaders - The canonical headers\n * @param {!string} signedHeaders - The signed headers\n * @param {!string} requestPayload - The payload of the request\n * @returns {string} - The canonical request\n */\nexport function canonicalRequest(httpRequestMethod, canonicalURI, canonicalQueryString, canonicalHeaders, signedHeaders,\n                                 requestPayload) {\n\treturn [\n\t\thttpRequestMethod,\n\t\tcanonicalURI,\n\t\tcanonicalQueryString,\n\t\tcanonicalHeaders,\n\t\t'',\n\t\tsignedHeaders,\n\t\thash(requestPayload)\n\t].join('\\n');\n}\n\n/**\n * Creates the string to sign\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n * @param {!string} algorithm - The algorithm (`AWS4-HMAC-SHA256`)\n * @param {!string} requestDate - The request date (`YYYMMDDThhmmssZ`)\n * @param {!string} credentialScope - the credential scope (formatted as `YYYYMMDD/region/service/aws4_request`)\n * @param {!string} hashedCanonicalRequest\n * @returns {string} - The string to sign\n */\nexport function stringToSign(algorithm, requestDate, credentialScope, hashedCanonicalRequest) {\n\treturn [\n\t\talgorithm,\n\t\trequestDate,\n\t\tcredentialScope,\n\t\thashedCanonicalRequest\n\t].join('\\n');\n}\n\n/**\n * Calculates the signature\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n * @param {!string} secretAccessKey - The secret access key for the AWS account\n * @param {!string} date - The date in YYYYMMDD format\n * @param {!string} region - The AWS region (e.g. `us-east-1`)\n * @param {!string} service - The AWS service (e.g. `iam`)\n * @param {!string} stringToSign - The string to sign\n * @returns {string} - The signature\n */\nexport function sign(secretAccessKey, date, region, service, stringToSign) {\n\tlet signingKey = 'AWS4' + secretAccessKey;\n\n\t[\n\t\tdate,\n\t\tregion,\n\t\tservice,\n\t\t'aws4_request'\n\t].forEach(data => signingKey = hmac(signingKey, data));\n\n\treturn hmac(signingKey, stringToSign, 'hex');\n}\n\n/**\n * Creates the authorization string\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n * @param algorithm\n * @param accessKeyId\n * @param credentialScope\n * @param signedHeaders\n * @param signature\n * @returns {string}\n */\nexport function authorization(algorithm, accessKeyId, credentialScope, signedHeaders, signature) {\n\tlet auth = {\n\t\t'Credential': accessKeyId + '/' + credentialScope,\n\t\t'SignedHeaders': signedHeaders,\n\t\t'Signature': signature\n\t};\n\n\treturn [\n\t\talgorithm,\n\t\tObject\n\t\t\t.keys(auth)\n\t\t\t.map(key => [key, auth[key]].join('='))\n\t\t\t.join(', ')\n\t].join(' ');\n}\n\n/**\n *\n * @param action\n * @param algorithm\n * @param accessKeyId\n * @param credentialScope\n * @param date\n * @param timeoutInterval\n * @param signedHeaders\n * @param signature\n * @returns {*}\n */\nexport function querystringify(action, algorithm, accessKeyId, credentialScope, date, timeoutInterval, signedHeaders,\n                               signature) {\n\treturn action + querystring.stringify({\n\t\t'X-Amz-Algorithm': algorithm,\n\t\t'X-Amz-Credential': accessKeyId + '/' + credentialScope,\n\t\t'X-Amz-Date': date,\n\t\t'X-Amz-Expires': timeoutInterval,\n\t\t'X-Amz-SignedHeaders': signedHeaders,\n\t\t'X-Amz-Signature': signature\n\t});\n}\n\n/**\n *\n * @param request\n * @returns {{head: *, body: *}}\n */\nexport function parseRequest(request) {\n\tlet [head, body] = request.split(CRLF + CRLF);\n\n\treturn {head, body};\n}\n\n/**\n *\n * @param head\n * @param body\n * @returns {string}\n */\nfunction unparseRequest(head, body) {\n\treturn [\n\t\thead,\n\t\tbody\n\t].join(CRLF.repeat(2));\n}\n\n/**\n *\n * @param head\n * @returns {{method: string, requestURI: string, httpVersion: string, headers: Array.<string>}}\n */\nexport function parseHead(head) {\n\tlet lines = head.split(CRLF);\n\tlet requestLine = lines[0];\n\tlet headers = lines.slice(1);\n\tlet {method, requestURI, httpVersion} = parseRequestLine(requestLine);\n\n\treturn {method, requestURI, httpVersion, headers};\n}\n\n/**\n *\n * @param requestLine\n * @returns {{method: string, requestURI: string, httpVersion: string}}\n */\nfunction parseRequestLine(requestLine) {\n\tlet method = requestLine\n\t\t.match(/^[A-Z]+\\s/ig)[0];\n\tlet httpVersion = requestLine\n\t\t.match(/\\shttp\\/\\d+\\.\\d+$/ig)[0];\n\tlet requestURI = requestLine\n\t\t.slice(method.length, -httpVersion.length);\n\n\treturn {\n\t\tmethod: method.trim(),\n\t\trequestURI: requestURI,\n\t\thttpVersion: httpVersion.trim()\n\t};\n}\n\n/**\n *\n * @param rawUrl\n * @returns {{canonicalURI: (XMLList|XML), canonicalQueryString: string}}\n */\nfunction parseUrl(rawUrl) {\n\tlet [uri, query] = rawUrl.split(/\\?(.+)/);\n\tlet queryParams = {};\n\tlet canonicalQueryString = '';\n\n\tif (query) {\n\t\tquery.replace(/\\s(.+)/g, '')\n\t\t\t.replace(/\\+/g, ' ')\n\t\t\t.split('&')\n\t\t\t.forEach(param => {\n\t\t\t\tlet [name, val] = param.split('=');\n\n\t\t\t\tif (name in queryParams) {\n\t\t\t\t\tqueryParams[name].push(val);\n\t\t\t\t} else {\n\t\t\t\t\tqueryParams[name] = [val];\n\t\t\t\t}\n\t\t\t})\n\t\t;\n\n\t\tlet queryParamsList = Object.keys(queryParams).sort();\n\n\t\tcanonicalQueryString = queryParamsList.map(key => {\n\t\t\treturn queryParams[key]\n\t\t\t\t.sort()\n\t\t\t\t.map(val => {\n\t\t\t\t\treturn [\n\t\t\t\t\t\tencodeURIComponent(key),\n\t\t\t\t\t\tencodeURIComponent(val || '')\n\t\t\t\t\t].join('=');\n\t\t\t\t})\n\t\t\t\t.join('&');\n\t\t}).join('&');\n\t}\n\n\treturn {\n\t\tcanonicalURI: path.normalize(uri),\n\t\tcanonicalQueryString\n\t};\n}\n\n/**\n *\n * @param rawHeaders\n * @returns {{canonicalHeadersString: string, signedHeadersString: string}}\n */\nfunction parseCanonicalHeaders(rawHeaders) {\n\tlet headersMap = {};\n\n\trawHeaders.forEach(header => {\n\t\tlet [name, value] = header.split(/:(.+)/).slice(0, 2);\n\n\t\tname = name.toLowerCase();\n\t\tvalue = value.trim();\n\n\t\tif (name in headersMap) {\n\t\t\theadersMap[name].push(value);\n\t\t} else {\n\t\t\theadersMap[name] = [value];\n\t\t}\n\t});\n\n\tlet signedHeadersList = Object.keys(headersMap).sort();\n\n\tlet canonicalHeadersString = signedHeadersList.map(key => {\n\t\treturn [\n\t\t\tkey,\n\t\t\theadersMap[key].sort().join(',')\n\t\t].join(':');\n\t}).join('\\n');\n\n\tlet signedHeadersString = signedHeadersList.join(';');\n\n\treturn {canonicalHeadersString, signedHeadersString};\n}\n\n/**\n *\n * @param request\n * @param authorization\n * @returns {string}\n */\nexport function addAuthorization(request, authorization) {\n\tlet parsedRequest = parseRequest(request);\n\n\treturn unparseRequest(\n\t\tparsedRequest.head + CRLF + 'Authorization: ' + authorization,\n\t\tparsedRequest.body\n\t);\n}\n\n/**\n *\n * @param request\n * @returns {string}\n */\nexport function requestToCanonicalRequest(request) {\n\tlet parsedRequest = parseRequest(request);\n\tlet parsedHead = parseHead(parsedRequest.head);\n\tlet parsedUrl = parseUrl(parsedHead.requestURI);\n\tlet parsedHeaders = parseCanonicalHeaders(parsedHead.headers);\n\n\treturn canonicalRequest(\n\t\tparsedHead.method,\n\t\tparsedUrl.canonicalURI,\n\t\tparsedUrl.canonicalQueryString,\n\t\tparsedHeaders.canonicalHeadersString,\n\t\tparsedHeaders.signedHeadersString,\n\t\tparsedRequest.body\n\t);\n}"]}